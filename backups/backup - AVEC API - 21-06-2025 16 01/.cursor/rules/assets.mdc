---
description: 
globs: 
alwaysApply: false
---
Rule Name: Assets - Organisation des ressources
Description: Règles et conventions pour l'organisation et la gestion des ressources dans le dossier assets du projet EcoDeli.

## Structure du dossier assets

- **js/**: Tous les scripts JavaScript personnalisés
  - Les scripts généraux du site (comme darkmode.js, color-modes.js)
  - Les scripts spécifiques aux fonctionnalités doivent être nommés selon leur fonction

- **dist/**: Fichiers compilés et optimisés pour la production
  - Les fichiers minifiés et concaténés
  - N'éditez pas directement ces fichiers, modifiez les sources originales
  - **admin.css**: Styles spécifiques pour l'interface d'administration
  - **admin.js**: Scripts pour l'interface d'administration

- **brand/**: Ressources graphiques et identité visuelle
  - Logo et variantes (favicon, logo-dark, logo-light)
  - Palette de couleurs et éléments de marque
  - Images et illustrations de la marque
  

## Conventions de nommage

1. Utilisez des noms descriptifs et en minuscules pour les fichiers
2. Utilisez le tiret (_) pour séparer les mots dans les noms de fichiers
3. Groupez les fichiers par fonctionnalité ou composant

## CSS Button Rules

1. Tous les boutons cliquables dans l'admin doivent avoir cette règle CSS:
   ```css
   .card-header a, .card-header button, .btn-action {
     position: relative;
     z-index: 5;
     pointer-events: auto;
   }
   ```

2. En cas de problème de cliquabilité, ajouter directement les styles inline:
   ```html
   style="position: relative; z-index: 100; pointer-events: auto;"
   ```

3. Éviter les éléments positionnés absolument qui pourraient recouvrir des boutons

4. Pour les tables avec actions, utiliser:
   ```css
   .table .actions {
     position: relative;
     z-index: 5;
   }
   ```

5. Toujours utiliser des classes Bootstrap pour la cohérence visuelle (btn-primary, btn-success, etc.)

## Bibliothèques externes

- Bootstrap 5.3 (chargé via CDN)
- Préférez utiliser les fonctionnalités natives de Bootstrap avant d'ajouter d'autres bibliothèques

## Bonnes pratiques

1. Minimisez les requêtes HTTP en regroupant les fichiers
2. Optimisez les images pour le web avant de les ajouter
3. Documentez les nouvelles fonctionnalités JS avec des commentaires
4. Respectez l'architecture existante pour l'intégration de nouvelles ressources
5. Toujours tester les interactions sur différents navigateurs


